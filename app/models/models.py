"""Database models for the document management system.

This module defines the SQLAlchemy ORM models used for storing documents,
highlights, and watched directories. It provides the core data structure
for managing PDF documents and their associated highlights.

Classes:
    Document: Represents a PDF document in the system
    Highlight: Represents a highlighted section within a document
    Topic: Represents a topic discovered through BERTopic analysis
    WatchedDirectory: Represents a directory being monitored for new documents
"""

from sqlalchemy import Column, Integer, String, Float, DateTime, ForeignKey, Text, JSON, LargeBinary, Boolean, UniqueConstraint
from sqlalchemy.orm import relationship
from .base import Base
from datetime import datetime

class Document(Base):
    """Represents a PDF document in the system.
    
    This model stores metadata about PDF documents including their location
    on disk and creation/modification timestamps.
    
    Attributes:
        id (int): Primary key identifier
        filename (str): Name of the PDF file
        filepath (str): Full path to the PDF file on disk
        title (str): Document title
        created_at (datetime): Timestamp when record was created
        updated_at (datetime): Timestamp when record was last updated
        highlights (List[Highlight]): Associated highlight objects
    """
    __tablename__ = "documents"

    id = Column(Integer, primary_key=True, index=True)
    filename = Column(String)
    filepath = Column(String, unique=True)
    title = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    highlights = relationship("Highlight", back_populates="document", cascade="all, delete-orphan")

class Topic(Base):
    """Represents a topic discovered through BERTopic analysis.
    
    Attributes:
        id (int): Primary key identifier
        name (str): Topic name generated by LLaMA
        keywords (JSON): Top keywords and their weights
        parent_topic_id (int): ID of parent topic in hierarchy (if any)
        description (str): Detailed topic description
        created_at (datetime): Timestamp when topic was created
    """
    __tablename__ = "topics"

    id = Column(Integer, primary_key=True)
    name = Column(String(200), nullable=False)
    keywords = Column(JSON)  # Store keywords and weights as JSON
    parent_topic_id = Column(Integer, ForeignKey('topics.id'), nullable=True)
    description = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    highlights = relationship("Highlight", back_populates="topic")
    highlight_topics = relationship("HighlightTopic", back_populates="topic")
    subtopics = relationship("Topic",
                           backref="parent_topic",
                           remote_side=[id],
                           cascade="all, delete-orphan",
                           single_parent=True)

class HighlightTopic(Base):
    """Represents a many-to-many relationship between highlights and topics.
    
    This allows each highlight to be associated with multiple topics,
    each with its own confidence score.
    
    Attributes:
        id (int): Primary key identifier
        highlight_id (int): Foreign key to highlight
        topic_id (int): Foreign key to topic
        confidence (float): Confidence score for this topic assignment
        is_primary (bool): Whether this is the primary topic for the highlight
        created_at (datetime): Timestamp when the assignment was created
    """
    __tablename__ = "highlight_topics"
    
    id = Column(Integer, primary_key=True)
    highlight_id = Column(Integer, ForeignKey("highlights.id", ondelete="CASCADE"), nullable=False)
    topic_id = Column(Integer, ForeignKey("topics.id", ondelete="CASCADE"), nullable=False)
    confidence = Column(Float, nullable=False)
    is_primary = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    highlight = relationship("Highlight", back_populates="highlight_topics")
    topic = relationship("Topic", back_populates="highlight_topics")
    
    # Unique constraint to prevent duplicate assignments
    __table_args__ = (
        UniqueConstraint('highlight_id', 'topic_id', name='uq_highlight_topic'),
    )

class Highlight(Base):
    """Represents a highlighted section within a PDF document.
    
    Stores the location and content of highlights made by users in PDF documents.
    
    Attributes:
        id (int): Primary key identifier
        document_id (int): Foreign key to parent document
        text (str): The highlighted text content
        original_language (str): ISO language code
        translated_text (str): English translation if needed
        embedding (bytes): BERT embeddings for semantic search
        page_number (int): Page number where highlight appears
        rect_x0 (float): Left X coordinate of highlight rectangle
        rect_y0 (float): Bottom Y coordinate of highlight rectangle
        rect_x1 (float): Right X coordinate of highlight rectangle
        rect_y1 (float): Top Y coordinate of highlight rectangle
        topic_id (int): Foreign key to primary topic
        topic_confidence (float): Confidence score for primary topic
        created_at (datetime): Timestamp when record was created
        updated_at (datetime): Timestamp when record was last updated
    """
    __tablename__ = "highlights"

    id = Column(Integer, primary_key=True, index=True)
    document_id = Column(Integer, ForeignKey("documents.id"))
    text = Column(String)
    original_language = Column(String(10))  # ISO language code
    translated_text = Column(Text, nullable=True)  # English translation if needed
    embedding = Column(LargeBinary, nullable=True)  # Store BERT embeddings for semantic search
    
    # PDF location data
    page_number = Column(Integer)
    rect_x0 = Column(Float)
    rect_y0 = Column(Float)
    rect_x1 = Column(Float)
    rect_y1 = Column(Float)
    
    # Primary topic assignment
    topic_id = Column(Integer, ForeignKey("topics.id"), nullable=True)
    topic_confidence = Column(Float)  # Confidence score for primary topic
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    document = relationship("Document", back_populates="highlights")
    topic = relationship("Topic", back_populates="highlights")
    highlight_topics = relationship("HighlightTopic", back_populates="highlight", cascade="all, delete-orphan")

class WatchedDirectory(Base):
    """Represents a directory being monitored for new documents.
    
    Tracks directories that should be scanned periodically for new PDF documents
    to import into the system.
    
    Attributes:
        id (int): Primary key identifier
        path (str): Full filesystem path to watched directory
        last_scan (datetime): Timestamp of last directory scan
        created_at (datetime): Timestamp when record was created
    """
    __tablename__ = 'watched_directories'
    
    id = Column(Integer, primary_key=True)
    path = Column(String(500), nullable=False, unique=True)
    last_scan = Column(DateTime, default=datetime.utcnow)
    created_at = Column(DateTime, default=datetime.utcnow)

    def __repr__(self):
        return f"<WatchedDirectory(path='{self.path}')>"